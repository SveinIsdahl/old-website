{"version":3,"sources":["databaseHandler.js","Day.js","Week.js","LoadingAnimation.js","Calendar.js","App.js","index.js"],"names":["d","Date","setUTCDate","getUTCDate","getUTCDay","yearStart","UTC","getUTCFullYear","Math","ceil","Number","DatabaseHandler","this","objectVal","database","firebase","user","date","important","text","year","String","getFullYear","uid","ref","push","snapshot","data","Object","entries","map","value","dayOfWeek","getDay","tempDate","setDate","getDate","i","weekData","j","currentDate","getMonth","forEach","entry","Day","props","useState","setText","textAreaRef","useRef","databaseHandler","useContext","databaseHandlerContext","useEffect","pushToDatabase","className","style","backgroundColor","leftText","defaultValue","onBlur","current","Week","days","React","createElement","week","Fragment","Component","LoadingAnimation","id","Calendar","useObjectVal","loading","error","getData","key","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","createContext","App","useAuthState","Provider","signIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c51231.chunk.js","sourcesContent":["//@ts-check\nimport firebase from \"firebase/app\";\nclass DatabaseHandler {\n    constructor() {\n        this.objectVal = {};\n        this.database = firebase.database();\n        this.user = {};\n        \n    }\n    /**\n     * @param {String} date\n     * @param {Boolean} important\n     * @param {String} text\n     */\n    pushToDatabase(date, important, text) {\n        const year = String(new Date().getFullYear());\n        if(this.user.uid) {\n            this.database.ref(\"calendar/\" + this.user.uid + \"/\" + year).push(\n                {\n                    \"date\":date,\n                    \"important\": important,\n                    \"text\": text,\n                }\n            )\n        }\n        \n    }\n    getData([snapshot, loading, error]) {\n      \n        let database = [];\n        const date = new Date();\n        let data = [];\n        if (snapshot) {\n            database = Object.entries(snapshot[date.getFullYear()]).map((value) => {\n                return value[1]\n            });\n        }\n    \n        \n        //0-6\n        const dayOfWeek = date.getDay() - 1;\n\n        //Monday of last week(-1 because it gets added in the loop in the first itteration) \n        let tempDate = new Date();\n        tempDate.setDate(tempDate.getDate() - dayOfWeek - 7 - 1);\n\n        for (let i = (this.#getWeekNumber() - 1); i < 53; i++) {\n            let weekData = {\n                \"week\": String(i)\n            }\n           \n            for (let j = 0; j < 7; j++) {\n                tempDate.setDate(tempDate.getDate() + 1)\n                const currentDate = tempDate.getDate() + \".\" + (tempDate.getMonth() + 1);\n                weekData[\"date\" + j] = currentDate;\n\n                if (snapshot) {\n                    database.forEach((entry) => {\n                      \n                        if (String(entry.date) === String(currentDate)) {\n                            weekData[\"text\" + j] = entry.text;\n                        }\n                    })\n\n                }\n            }\n            data.push(weekData);\n        }\n        return data\n    }\n    get ref() {\n        return (\n            this.database.ref(\"calendar/\" + this.user.uid)\n        )\n    }\n    #getWeekNumber() {\n        let d = new Date()\n        // Sett til nærmeste torsdag: current date + 4 - current day number\n        // Søndag = dag nr 7\n        d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n        // Første dag i året\n        var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n        // Full uke til nærmeste torsdag\n        //@ts-ignore\n        var weekNo = Math.ceil((((d - Number(yearStart)) / 86400000) + 1) / 7);\n        // array med år og ukenr\n        return weekNo - 1;\n    }\n}\n\nexport default DatabaseHandler","//@ts-check\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { databaseHandlerContext } from \"./App\";\n\nexport default function Day(props) {\n    const [text, setText] = useState(props.text)\n    const textAreaRef = useRef(null)\n\n    const date = new Date();\n\n    const databaseHandler = useContext(databaseHandlerContext)\n\n\n    useEffect(() => {\n        //Push to database\n        if (props.text !== text) {\n            databaseHandler.pushToDatabase(props.date, false, text);\n        }\n    })\n    return (\n        <div className=\"day\">\n\n            {\n                ((date.getDate() + \".\" + (date.getMonth() + 1)) === props.date) ?\n                    <div className=\"dayTitle\" style={{ backgroundColor: \"var(--todayBackground)\" }}>\n                        <div>{props.leftText}</div>\n                        <div>{props.date}</div>\n                    </div>\n                    :\n                    <div className=\"dayTitle\">\n                        <div>{props.leftText}</div>\n                        <div>{props.date}</div>\n                    </div>\n            }\n            <textarea ref={textAreaRef} defaultValue={text} onBlur={() => setText(textAreaRef.current.value)}></textarea>\n\n        </div>\n    )\n}\n","//@ts-check\n\n\nimport React from \"react\"\nimport Day from \"./Day\"\n\nclass Week extends React.Component{\n    render() {\n        let days = [];\n        days[0] =\n            React.createElement(\n                Day,\n                //Props sent down component chain\n                //<Week date0=\"23.5\" text0=\"lorem ipsum\" date1=\"24.5\" text1=\"lorem ipsum\"/>\n                {date:this.props[\"date0\"], text: this.props[\"text0\"], leftText:this.props.week}\n            )\n        for (let i = 1; i < 7; i++) {\n                days.push(\n                    React.createElement(\n                        Day,\n                        //Props sent down component chain\n                        //<Week date0=\"23.5\" text0=\"lorem ipsum\" date1=\"24.5\" text1=\"lorem ipsum\"/>\n                        {date:this.props[\"date\"+i], text: this.props[\"text\"+i]}\n                    )\n                )\n        }\n        return(\n            <div className=\"weekContainer\">\n                {days.map((Day, i) => {\n                return (<React.Fragment key={i}>\n                            {Day}\n                        </React.Fragment>)\n            })}\n            </div>\n            \n            \n            \n        )\n    }\n}\n\nexport default Week","//@ts-check\nexport default function LoadingAnimation() {\n\n    return (\n        <div id=\"ring\" className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n\n    )\n}","//@ts-check\n\nimport React, {useContext} from \"react\"\nimport Week from \"./Week\"\nimport {useObjectVal} from 'react-firebase-hooks/database'\nimport 'firebase/auth';\nimport {databaseHandlerContext } from \"./App\";\nimport LoadingAnimation from \"./LoadingAnimation\";\n\n\nexport default function Calendar(props) {\n    const databaseHandler = useContext(databaseHandlerContext)\n    const [snapshot, loading, error] = useObjectVal(databaseHandler.ref)\n\n    const data = databaseHandler.getData([snapshot, loading, error]);\n    \n    return (\n        <div id=\"calendar\">\n            {\n                loading ? \n                <LoadingAnimation />\n                :\n                (data.map((week, i) => {\n                    return (\n                        <Week {...week} key={i} />\n                    )\n                }))\n                \n                \n            }\n  \n        </div>\n    )\n  }","//@ts-check\n\nimport './App.css';\nimport './Day.css';\nimport './Week.css';\nimport './LoadingAnimation.css';\n\nimport firebase from 'firebase/app';\nimport DatabaseHandler from './databaseHandler';\nimport Calendar from \"./Calendar\"\nimport 'firebase/auth';\nimport \"firebase/database\"\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport React from 'react';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_6EPzd56KtaDCm9k1Od-MorOcuxwMlMI\",\n  authDomain: \"calendar-9d4d6.firebaseapp.com\",\n  databaseURL: \"https://calendar-9d4d6.firebaseio.com\",\n  projectId: \"calendar-9d4d6\",\n  storageBucket: \"calendar-9d4d6.appspot.com\",\n  messagingSenderId: \"103816515999\",\n  appId: \"1:103816515999:web:07a5093add3e224a14adaa\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\n\nconst databaseHandler = new DatabaseHandler()\nconst databaseHandlerContext = React.createContext(databaseHandler)\ndatabaseHandler.database = firebase.database();\n\nexport default function App() {\n  //Creates user and updates after login\n  const [user] = useAuthState(auth)\n  databaseHandler.user = user;\n\n  return (\n    <div className=\"App\">     \n      {user ? (\n           <databaseHandlerContext.Provider value={databaseHandler}>\n            <Calendar />\n           </databaseHandlerContext.Provider>\n      ): signIn()}\n    </div>\n  );\n}\nfunction signIn() {\n  function signInGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider)\n  }\n  return(\n    <button className=\"button\" onClick={signInGoogle}>Sign in with Google</button>\n  )\n}\nexport { databaseHandlerContext} ","//@ts-check\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}